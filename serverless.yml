service: dispose-me

frameworkVersion: '2'

custom:
  customDomain:
    domainName: ${env:INTERFACE_SUBDOMAIN}
    autoDomain: true
    endpointType: 'regional'
    stage: ${self:provider.stage}
    createRoute53Record: true
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
      forceInclude:
        - ejs
    packager: 'yarn'
    webpackConfig: './webpack.config.js'
  dotenv:
    logging: false
    required:
      file: true
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - INTERFACE_SUBDOMAIN

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'staging'}
  region: ${env:AWS_REGION}
  timeout: 3
  memorySize: 512
  apiGateway:
    apiKeySourceType: AUTHORIZER
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    LOG_LEVEL: 2
  logRetentionInDays: 14
  apiKeys:
    - 'Postman'
    - 'Appium tests'
  usagePlan:
    quota:
      limit: 5000
      period: DAY
    throttle:
      burstLimit: 5
      rateLimit: 3
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: EmailBucket
    - Effect: 'Allow'
      Action:
        - 's3:GetObject'
        - 's3:PutObject'
        - 's3:DeleteObject'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: EmailBucket
            - '/*'

functions:
  api:
    handler: src/api.handler
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    events:
      - http:
          path: /
          method: get
          cors: true
          private: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: '' # needed to get rid of default: method.request.header.Authorizer
            type: request
      - http:
          path: /{proxy+}
          method: get
          cors: true
          private: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: ''
            type: request
  processor:
    handler: src/email-processor.handler
  authorizer:
    handler: src/authorizer.handler
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'

package:
  individually: true

plugins:
  - serverless-domain-manager
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

resources:
  Resources:
    EmailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:EMAIL_BUCKET_NAME}
        LifecycleConfiguration:
          Rules:
          - Id: CleanUpRule
            Status: Enabled
            ExpirationInDays: '1'
    EmailBucketPermissions:
      Type: AWS::S3::BucketPolicy
      DependsOn: EmailBucket
      Properties:
        Bucket:
          Ref: EmailBucket
        PolicyDocument:
          Statement:
            - Principal: 
                Service: "ses.amazonaws.com"
              Action:
                - s3:PutObject
              Effect: Allow
              Sid: "AllowSESPuts"
              Resource:
                Fn::Join: ['', ['arn:aws:s3:::', Ref: EmailBucket, '/*'] ]
              Condition:
                StringEquals:
                  "aws:Referer": { Ref: AWS::AccountId }
    SESPermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - ProcessorLambdaFunction
      Properties:
        FunctionName: ${self:service}-${self:provider.stage}-processor
        Action: lambda:InvokeFunction
        Principal: ses.amazonaws.com
        SourceAccount:
          Ref: AWS::AccountId
